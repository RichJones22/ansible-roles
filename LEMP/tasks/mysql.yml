---
#- name: Remove default apache package
#  action: apt pkg=apache2 state=absent
#
#- name: Install wget
#  action: apt pkg=wget state=present
#
#- name: Install zip
#  action: apt pkg=zip state=present
#
#- name: Install unzip
#  action: apt pkg=unzip state=present


- name: Install packages for MySQL
  action: apt pkg={{ item }} state=present
  with_items:
    - python-setuptools
    - python-dev
    - build-essential
    - python-pip
    - libmysqlclient-dev
    - software-properties-common
    - zip
    - unzip

- name: Remove default apache package
  action: apt pkg=apache2 state=absent

- name: Install pip
  shell: easy_install pip

- name: Updating the cache
  apt: update_cache=yes

- name: Install packages for MySQL
  action: apt pkg={{ item }} state=present
  with_items:
    - mysql-server
    - mysql-client
    - python-mysqldb

- action: apt pkg=ansible state=present
#  when: symfony_env == "local"

- name: Install MySQL python package via pip
  shell: pip install MySQL-python

- name: Start the MySQL service
  action: service name=mysql state=started
#  when: symfony_env == "local"

- name: Update mysql password for APP mysql user accounts
  mysql_user: name={{ dev_app_mysql_user }} host={{ item }} password={{ dev_app_mysql_pass }} priv=*.*:ALL,GRANT
  with_items:
#    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost
  ignore_errors: true
#  when: symfony_env == "local"

- name: Copy local .my.cnf.j2 file with root's password credentials
  template: src=.my.cnf.j2 dest=/root/.my.cnf owner=root mode=0600
#  when: symfony_env == "local"

#- name: Copy local .my.cnf.j2 file with vagrant's password credentials
#  template: src=.my.cnf.j2 dest=/home/{{ ansible_ssh_user }}/.my.cnf owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }} mode=0600
##  when: symfony_env == "local"

#- name: Update mysql password for APP mysql all hosts
#  mysql_user: name={{ dev_app_mysql_user }} host={{ item }} password={{ dev_app_mysql_pass }} priv=*.*:ALL,GRANT
#  with_items:
#    - "%"
#  ignore_errors: true
#  when: symfony_env == "local"

- name: Ensure APP dev database
  mysql_db: name={{ dev_app_mysql_db }} state=present login_host={{ dev_app_mysql_host }} login_user={{ dev_app_mysql_user }} login_password={{ dev_app_mysql_pass }}
#  when: symfony_env == "local"
  ignore_errors: true

- name: Global mysql configuration for dev
  template: src=my.cnf.j2 dest=/etc/mysql/my.cnf owner={{ansible_ssh_user}} mode=0600
#  when: symfony_env == "local"

- name: Restart mysql on dev
  service: name=mysql state=restarted
#  when: symfony_env == "local"

- name: Load timezone tables on dev
  shell: mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u{{ dev_app_mysql_user }} -p{{ dev_app_mysql_pass }} mysql
#  when: symfony_env == 'dev'
